#!/usr/local/bin/python3
# Copyright (c) KMG. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
##

import argparse
import os
import shutil

DUPLIS_BANNER_FILE = os.path.join(os.path.curdir, 'banner.txt')
LDD_FILE = os.path.join(os.path.curdir, 'ldd-cmd')
NM_FILE = os.path.join(os.path.curdir, 'nm-cmd')
TMP_DIR = os.path.join(os.path.curdir, 'scratch', 'tmp')
TMP_FILE = os.path.join(TMP_DIR, 'tmp.txt')
LDD_OUT_FILE = os.path.join(TMP_DIR, 'ldd.txt')

def duplis():
    parser = argparse.ArgumentParser(description='duplis',
                                     epilog='Please report issues at https://github.com/kmgowda/duplis')
    parser.add_argument('-i', '--ifile', help="Input executable or lib file", required=True)
    parser.add_argument('-l', '--lfile', help="lib file", required=False)
    parser.add_argument('-p', '--prefix', help="prefix", required=False)
    parser.add_argument('-x', '--exclude', help="exclude prefix", required=False)
    parser.add_argument('-o', '--ofile', help='Output/Results txt file', default="out.txt")
    args = parser.parse_args()
    print(open(DUPLIS_BANNER_FILE, 'r').read())
    print('Input File : ', args.ifile)
    print('Output File : ', args.ofile)
    if os.path.isfile(LDD_FILE) is False:
        print(LDD_FILE + " is missing, exiting!")
        exit(1)
    if os.path.isfile(NM_FILE) is False:
        print(LDD_FILE + " is missing, exiting!")
        exit(1)

    ldd_cmd = open(LDD_FILE, 'r').read()
    if not ldd_cmd:
        print("ldd command is missing in "+LDD_FILE +",  exiting!")
        exit(2)

    nm_cmd = open(NM_FILE, 'r').read()
    if not nm_cmd:
        print("nm command is missing in "+NM_FILE +",  exiting!")
        exit(2)

    shutil.rmtree(TMP_DIR)
    os.makedirs(TMP_DIR)
    os.system(ldd_cmd+ " > "+TMP_FILE)
    file1 = open(TMP_FILE, 'r')
    file2 = open(LDD_FILE, 'w')

    while True:
        # Get next line from file
        line = file1.readline()

        # if line is empty
        # end of file is reached
        if not line:
            break
        arr = line.split("=>")
        try:
            path = arr[1].split(' (0x')[0].strip()
        except:
            pass
        file2.write(path)
        file2.write('\n')

    file1.close()
    file2.close()
    os.remove(TMP_FILE)

if __name__ == "__main__":
    duplis()
